{"version":3,"sources":["components/useSalahTimes.js","components/CurrentTimeDisplay.js","components/nextSalahDisplay.js","components/useNextSalah.js","components/useClock.js","components/HijriDate.js","components/CurrentDateDisplay.js","App.js","serviceWorker.js","index.js","components/SalahTimesHorizontal.js","components/dashboard-1920.js","components/SalahTimesVertical.js","components/dashboard-1080.js"],"names":["useSalahTimes","day","month","year","masjidId","_useState","useState","_useState2","Object","_Users_sakhter14_dev_dev3_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","fajar","setFajar","_useState3","_useState4","shuruq","setshuruq","_useState5","_useState6","zuhar","setZuhar","_useState7","_useState8","asar","setAsar","_useState9","_useState10","magrib","setMagrib","_useState11","_useState12","isha","setIsha","_useState13","_useState14","hijri","setHijri","_useState15","_useState16","salahTimes","setSalahTimes","_useState17","_useState18","masjidInfo","setMasjidInfo","convertToDateTime","time","fullTime","moment","useEffect","iqamahUrl","axios","get","then","result","console","log","data","iqamaTimes","info","d","prayerTimes","name","title","shortname","JSON","parse","masjid_preferences","short_name","start","fajr_start_time","iqamah","fajr_iqama_time","zuhr_start_time","zuhr_iqama_time","asr_start_time","asr_iqama_time","magrib_start_time","isha_start_time","isha_iqama_time","parseInt","hijri_month","hijri_day","date","hijri_date","end","current","jumma1_iqama","catch","error","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","moment__WEBPACK_IMPORTED_MODULE_1__","moment__WEBPACK_IMPORTED_MODULE_1___default","CurrentTimeDisplay","_ref","tick","a","createElement","className","format","moment__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","NextSalahDisplay","salahName","salahtime","salahMsg","duration","diff","trim","useNextSalah","tfajar","today","nextsalah","setNextsalah","nextsalahName","setNextsalahName","setsalahMsg","updatedSalahTimes","setUpdateSalahTimes","updateTimetype","forEach","item","i","length","useClock","props","datetime","setdatetime","hour","sethour","min","setmin","second","setsecond","timerID","setInterval","Date","getHours","getMinutes","getSeconds","clearInterval","HijriDate","undefined","react_default","months","Array","ordinal","hijriToString","CurrentDateDisplay","components_HijriDate","App","window","innerWidth","require","default","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","SalahTimesHorizontal","friday","showIqamaTitle","Row","Col","sm","map","dist_default","Dashboard1920","_useClock","_useClock2","slicedToArray","tomorrow","add","_useQueryParams","useQueryParams","masjidid","NumberParam","_useQueryParams2","query","_useSalahTimes","_useSalahTimes2","_useSalahTimes3","_useSalahTimes4","_useNextSalah","_useNextSalah2","Container","fluid","nextSalahDisplay","components_SalahTimesHorizontal","SalahTimesVertical","style","alignContent","height","components_SalahTimesVertical"],"mappings":"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","file":"static/js/main.85267e84.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport {\n    useQueryParams,\n    StringParam,\n    NumberParam,\n    ArrayParam,\n} from 'use-query-params';\n\nexport const useSalahTimes = (day, month, year, masjidId) => {\n    const [fajar, setFajar] = useState({});\n    const [shuruq, setshuruq] = useState({});\n    const [zuhar, setZuhar] = useState({});\n    const [asar, setAsar] = useState({});\n    const [magrib, setMagrib] = useState({});\n    const [isha, setIsha] = useState({});\n    const [hijri, setHijri] = useState({});\n    const [salahTimes, setSalahTimes] = useState([]);\n    const [masjidInfo, setMasjidInfo] = useState({});\n\n    const convertToDateTime = (time) => {\n        const fullTime = time + year + ':' + month + ':' + day;\n        const mtime = moment(fullTime, \"hh:mm a YYYY:M:D\");\n        return mtime;\n    };\n\n\n    useEffect(() => {\n        const iqamahUrl = 'http://ummahsoft.org/salahtime/api/masjidi/v1/index.php/masjids/' + masjidId + '/iqamahandprayertimes/' + year + '/' + month;\n\n        axios.get(iqamahUrl).then((result) => {\n            console.log(result);\n            console.log(result.data.iqamaTimes);\n\n            const info = result.data.masjidInfo;\n            const d = result.data.prayerTimes[day - 1];\n            setMasjidInfo({name: info.title, shortname: JSON.parse(info.masjid_preferences).short_name});\n            setFajar({start: convertToDateTime(d.fajr_start_time), iqamah: convertToDateTime(info.fajr_iqama_time)});\n            setshuruq(convertToDateTime(d.shuruq));\n            setZuhar({start: convertToDateTime(d.zuhr_start_time), iqamah: convertToDateTime(info.zuhr_iqama_time)});\n            setAsar({start: convertToDateTime(d.asr_start_time), iqamah: convertToDateTime(info.asr_iqama_time)});\n            setMagrib({start: convertToDateTime(d.magrib_start_time), iqamah: convertToDateTime(d.magrib_start_time)});\n            setIsha({start: convertToDateTime(d.isha_start_time), iqamah: convertToDateTime(info.isha_iqama_time)});\n            setHijri({month: parseInt(d.hijri_month), day: parseInt(d.hijri_day), year: 1440, date: d.hijri_date});\n            setSalahTimes([\n                {\n                    name: 'Fajar',\n                    start: convertToDateTime(d.fajr_start_time),\n                    end: convertToDateTime(d.shuruq),\n                    iqamah: convertToDateTime(info.fajr_iqama_time),\n                    current: false\n                },\n                {name: 'Shuruq', start: convertToDateTime(d.shuruq)},\n                {\n                    name: 'Zuhar',\n                    start: convertToDateTime(d.zuhr_start_time),\n                    end: convertToDateTime(d.asr_start_time),\n                    iqamah: convertToDateTime(info.zuhr_iqama_time),\n                    current: false\n                },\n                {\n                    name: 'Asar',\n                    start: convertToDateTime(d.asr_start_time),\n                    end: convertToDateTime(d.magrib_start_time),\n                    iqamah: convertToDateTime(info.asr_iqama_time),\n                    current: false\n                },\n                {\n                    name: 'Magrib',\n                    start: convertToDateTime(d.magrib_start_time),\n                    end: convertToDateTime(d.isha_start_time),\n                    iqamah: convertToDateTime(d.magrib_start_time),\n                    current: false\n                },\n                {\n                    name: 'Isha',\n                    start: convertToDateTime(d.isha_start_time),\n                    end: convertToDateTime(d.fajr_start_time),\n                    iqamah: convertToDateTime(info.isha_iqama_time),\n                    current: false\n                },\n                {\n                    name: 'Friday',\n                    start: convertToDateTime(d.zuhr_start_time),\n                    end: convertToDateTime(d.asr_start_time),\n                    iqamah: convertToDateTime(info.jumma1_iqama),\n                    current: false\n                },\n            ]);\n        }).catch((error) => {\n            console.log(error);\n        });\n    }, [day, masjidId, month, year]);\n\n    return [fajar, zuhar, asar, magrib, isha, shuruq, hijri, salahTimes, masjidInfo];\n};\n","import React from \"react\";\nimport moment from 'moment'\n\nconst CurrentTimeDisplay = ({tick}) => {\n\n    const time = moment();\n    return (\n        <div>\n            <div>\n                <div className={'time'}>\n                    <div>{time.format(\" h:mm \")}</div>\n                    <div className={'ampm'}>{time.format(\" ss a\")}</div>\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default CurrentTimeDisplay;\n","import {Col} from \"react-bootstrap\";\n\nimport moment from 'moment'\nimport React from \"react\";\n\n\nconst NextSalahDisplay = ({salahName, salahtime, salahMsg}) => {\n    return (\n        <div className={'next-salah'}>\n            <div className={'title'}> {salahName} {salahMsg} in</div>\n            <div\n                className={'time'}>  {moment.duration(moment(salahtime).diff(moment())).format(\", h [hours], m [minutes]\", {trim: true})}</div>\n        </div>\n    );\n};\n\nexport default NextSalahDisplay;\n","import React, {useEffect, useState} from 'react';\n\n\nexport const useNextSalah = (fajar, shuruq, zuhar, asar, magrib, isha, tfajar, today, time, salahTimes) => {\n        const [nextsalah, setNextsalah] = useState('');\n        const [nextsalahName, setNextsalahName] = useState('Fajar');\n        const [salahMsg, setsalahMsg] = useState('');\n        const [updatedSalahTimes, setUpdateSalahTimes] = useState([]);\n        const updateTimetype = (salahtime) => {\n            if (today < salahtime.start) {\n                setsalahMsg('starts');\n                setNextsalah(salahtime.start);\n            } else if (today < salahtime.iqamah) {\n                setsalahMsg('iqamah');\n                setNextsalah(salahtime.iqamah);\n            }\n        };\n\n        useEffect(() => {\n            salahTimes.forEach(item => item.current = false);\n            var i = 0;\n            for (i = 0; i < salahTimes.length; i++) {\n                var current = salahTimes[i]\n                if (today < current.start && current.name !== 'Shuruq') {\n                    setNextsalahName(current.name);\n                    current.current = true;\n                    updateTimetype(current);\n                    break;\n                }\n            }\n\n            if (salahTimes.length > 0 && i >= salahTimes.length) {\n                setNextsalahName('Fajar');\n                updateTimetype(tfajar);\n                salahTimes[0].current = true;\n            }\n\n            if (salahTimes.length > 6) {\n                salahTimes[5].end = tfajar.start;\n            }\n            setUpdateSalahTimes(salahTimes);\n\n\n        }, [fajar, zuhar, asar, magrib, isha, shuruq, time]);\n\n        return [nextsalahName, nextsalah, salahMsg, updatedSalahTimes];\n    }\n;\n\n\n\n","import {useState, useEffect} from 'react';\nimport moment from 'moment'\n\nfunction useClock(props) {\n    const [datetime, setdatetime] = useState(moment());\n    const [hour, sethour] = useState(0);\n    const [min, setmin] = useState(0);\n    const [second, setsecond] = useState(0);\n\n    //Replaces componentDidMount and componentWillUnmount\n    useEffect(() => {\n        var timerID = setInterval(() => tick(), 1000);\n\n        return function cleanup() {\n            clearInterval(timerID);\n        };\n    }, []);\n\n    function tick() {\n        var datetime = new Date();\n        setdatetime(moment());\n        sethour(datetime.getHours());\n        setmin(datetime.getMinutes());\n        setsecond(datetime.getSeconds());\n\n    }\n\n    return [datetime, hour, min, second];\n}\n\nexport default useClock;\n","import React, {useEffect, useState} from 'react';\nimport ordinal from \"ordinal\"\n\nfunction hijriToString(day, month, year) {\n    var months = new Array(\"Muharram\", \"Safar\", \"Rabi-al Awwal\", \"Rabi-al Thani\", \"Jumada al-Ula\", \"Jumada al-Thani\", \"Rajab\", \"Sha\\'ban\", \"Ramadhan\", \"Shawwal\", \"Dhul Qa\\'dah\", \"Dhul Hijjah\");\n    return ordinal(day) + \" \" + months[month - 1];\n}\n\nconst HijriDate = ({day, month, year}) => {\n\n    if (day === undefined) return null;\n    return (\n        <div>\n            {hijriToString(day, month, year)}\n        </div>\n    );\n\n};\n\nexport default HijriDate;\n","import HijriDate from \"./HijriDate\";\nimport React from \"react\";\nimport moment from 'moment';\n\nconst CurrentDateDisplay = ({tick, hijri}) => {\n    const time = moment();\n    return (\n        <div>\n            <div className={'date'}>\n                {time.format(\"dddd, MMMM Do\")}\n            </div>\n            <div className={'date-hijri'}>\n                <HijriDate day={hijri.day} month={hijri.month} year={hijri.year}/>\n            </div>\n        </div>\n    );\n};\n\nexport default CurrentDateDisplay;\n","import React, {useEffect, useState} from 'react';\n\nimport './app.css';\n\n\nconst App = () => {\n\n    if (window.innerWidth >= 1920) {\n        return require(\"./components/dashboard-1920\").default();\n    } else if (window.innerWidth >= 1080) {\n        return require(\"./components/dashboard-1080\").default();\n    }\n\n    return (\n        <h1>\n            Current screen width {window.innerWidth} is not currently supported\n            Only supported with are 1920 and 1080\n        </h1>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard1920 from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Dashboard1920/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Col, Row} from \"react-bootstrap\";\nimport Moment from \"react-moment\";\nimport React from \"react\";\n\nconst SalahTimesHorizontal = ({fajar, shuruq, zuhar, asar, magrib, isha, friday, className, showIqamaTitle, salahTimes}) => {\n    const iqamFormat = \"h:mm\";\n    return (\n        <Row className={className}>\n            <Col sm={1}/>\n            <Col sm={10}>\n                <Row className={'iqama'}>\n                    {showIqamaTitle &&\n                    <Col>\n                        <Row>Iqama</Row>\n                    </Col>\n                    }\n                    {salahTimes.map((item) => {\n                        return <Col>\n                            <div className={'title'}>{item.name}</div>\n                            <Moment className={item.current ? 'current' : ''} format={iqamFormat}>\n                                {item.name === 'Shuruq' ? item.start : item.iqamah}\n                            </Moment>\n                            {item.name !== 'Shuruq' &&\n                            <div className={'info'}>\n                                <Moment format={iqamFormat}>\n                                    {item.start}\n                                </Moment>-<Moment format={iqamFormat}>{item.end}</Moment>\n                            </div>\n                            }\n                        </Col>\n                    })}\n                </Row>\n\n            </Col>\n            <Col sm={1}></Col>\n        </Row>\n    );\n};\n\n\nexport default SalahTimesHorizontal;\n","import React from 'react';\nimport {Col, Container, Row} from 'react-bootstrap';\nimport {useSalahTimes} from './useSalahTimes'\nimport moment from 'moment'\nimport './dashboard-1920.css';\nimport SalahTimesHorizontal from \"./SalahTimesHorizontal\"\nimport CurrentTimeDisplay from \"./CurrentTimeDisplay\";\nimport NextSalahDisplay from \"./nextSalahDisplay\";\nimport {useNextSalah} from \"./useNextSalah\";\nimport CurrentDateDisplay from \"./CurrentDateDisplay\";\nimport useClock from \"./useClock\"\nimport {useQueryParams, NumberParam} from \"use-query-params\";\n\nfunction Dashboard1920() {\n\n    //const {time, raw: currentTime} = useClock(\"HH:mm:ss\");\n\n    const [datetime, hour, min, second] = useClock();\n\n    const today = moment();\n    const tomorrow = moment().add(1, 'days');\n\n    const [query, setQuery] = useQueryParams({masjidid: NumberParam});\n\n    const [fajar, zuhar, asar, magrib, isha, shuruq, hijri, salahTimes, masjidInfo] = useSalahTimes(today.date(), today.month() + 1, today.year(), query.masjidid);\n    const [tfajar, tzuhar, tasar, tmagrib, tisha, tshuruq, thijri, tsalahTimes] = useSalahTimes(tomorrow.date(), tomorrow.month() + 1, tomorrow.year(), query.masjidid);\n    const [nextsalahName, nextsalah, salahMsg, updatedSalahTimes] = useNextSalah(fajar, shuruq, zuhar, asar, magrib, isha, tfajar, today, datetime, salahTimes);\n\n    return (\n        <div className=\"App\">\n            <Container fluid>\n                <Row>\n                    <Col className={'masjid-name'}>\n                        {masjidInfo.name} {masjidInfo.shortname}\n                    </Col>\n                </Row>\n                <Row className={'toprow'}>\n                    <Col sm={1}/>\n                    <Col sm={4}>\n                        <Col sm={1}/>\n                        <Col sm={10}>\n                            <CurrentDateDisplay time={second} hijri={hijri}/>\n                            <NextSalahDisplay salahName={nextsalahName} salahMsg={salahMsg} salahtime={nextsalah}/>\n\n                        </Col>\n                        <Col sm={1}/>\n                    </Col>\n                    <Col sm={2}/>\n                    <Col sm={4} className={'timecontainer'}>\n                        <CurrentTimeDisplay tick={second}/>\n                    </Col>\n                    <Col sm={1}/>\n                </Row>\n\n                <SalahTimesHorizontal\n                    className={'today'}\n                    salahTimes={updatedSalahTimes}\n                    fajar={fajar.iqamah}\n                    shuruq={shuruq}\n                    zuhar={zuhar.iqamah}\n                    asar={asar.iqamah}\n                    magrib={magrib.iqamah}\n                    isha={isha.iqamah}\n                    friday={zuhar.iqamah}/>\n\n            </Container>\n        </div>);\n}\n\nexport default Dashboard1920;\n","import {Col, Row} from \"react-bootstrap\";\nimport Moment from \"react-moment\";\nimport React from \"react\";\n\nconst SalahTimesVertical = ({fajar, shuruq, zuhar, asar, magrib, isha, friday, className, showIqamaTitle, salahTimes}) => {\n    const iqamFormat = \"h:mm\";\n    return (\n        <Row className={className}>\n            <Col sm={1}/>\n            <Col sm={10}>\n                <Row> </Row>\n                {salahTimes.map((item) => {\n                    return <Row style={{alignContent: 'center'}} className={item.current ? 'current' : ''}>\n                        <Col className={'title'}>{item.name}</Col>\n                        <Col> {item.name !== 'Shuruq' &&\n                        <div className={'info'}>\n                            <Moment format={iqamFormat}>\n                                {item.start}\n                            </Moment>-<Moment format={iqamFormat}>{item.end}</Moment>\n                        </div>\n                        } </Col>\n                        <Col>\n                            <Moment format={iqamFormat}>\n                                {item.name === 'Shuruq' ? item.start : item.iqamah}\n                            </Moment>\n\n                        </Col>\n                    </Row>\n                })}\n            </Col>\n            <Col sm={1}></Col>\n        </Row>\n    );\n};\n\n\nexport default SalahTimesVertical;\n","import React from 'react';\nimport {Col, Container, Row} from 'react-bootstrap';\nimport {useSalahTimes} from './useSalahTimes'\nimport moment from 'moment'\nimport './dashboard-1080.css';\nimport SalahTimesVertical from \"./SalahTimesVertical\"\nimport CurrentTimeDisplay from \"./CurrentTimeDisplay\";\nimport NextSalahDisplay from \"./nextSalahDisplay\";\nimport {useNextSalah} from \"./useNextSalah\";\nimport CurrentDateDisplay from \"./CurrentDateDisplay\";\nimport useClock from \"./useClock\"\nimport {useQueryParams, NumberParam} from \"use-query-params\";\n\nfunction Dashboard1920() {\n\n    //const {time, raw: currentTime} = useClock(\"HH:mm:ss\");\n\n    const [datetime, hour, min, second] = useClock();\n\n    const today = moment();\n    const tomorrow = moment().add(1, 'days');\n    const [query, setQuery] = useQueryParams({masjidid: NumberParam});\n\n    const [fajar, zuhar, asar, magrib, isha, shuruq, hijri, salahTimes, masjidInfo] = useSalahTimes(today.date(), today.month() + 1, today.year(), query.masjidid);\n    const [tfajar, tzuhar, tasar, tmagrib, tisha, tshuruq, thijri, tsalahTimes] = useSalahTimes(tomorrow.date(), tomorrow.month() + 1, tomorrow.year(), query.masjidid);\n    const [nextsalahName, nextsalah, salahMsg, updatedSalahTimes] = useNextSalah(fajar, shuruq, zuhar, asar, magrib, isha, tfajar, today, datetime, salahTimes);\n\n    return (\n        <div className=\"App\">\n            <Container fluid>\n                <Row>\n                    <Col className={'masjid-name'}>\n                        {masjidInfo.name} {masjidInfo.shortname}\n                    </Col>\n                </Row>\n                <Row className={'toprow'}>\n                    <Col sm={1}/>\n                    <Col sm={4}>\n                        <Col sm={1}/>\n                        <Col sm={10}>\n\n                            <NextSalahDisplay salahName={nextsalahName} salahMsg={salahMsg} salahtime={nextsalah}/>\n                        </Col>\n                        <Col sm={1}/>\n                    </Col>\n                    <Col sm={6} className={'timecontainer'}>\n                        <CurrentTimeDisplay tick={second}/>\n                        <CurrentDateDisplay time={second} hijri={hijri}/>\n                    </Col>\n                    <Col sm={1}/>\n                </Row>\n\n                <Row style={{height: '100px'}}></Row>\n\n                <SalahTimesVertical\n                    className={'today'}\n                    salahTimes={updatedSalahTimes}\n                    fajar={fajar.iqamah}\n                    shuruq={shuruq}\n                    zuhar={zuhar.iqamah}\n                    asar={asar.iqamah}\n                    magrib={magrib.iqamah}\n                    isha={isha.iqamah}\n                    friday={zuhar.iqamah}/>\n\n            </Container>\n        </div>);\n}\n\nexport default Dashboard1920;\n"],"sourceRoot":""}